#!/bin/bash

# git-open-pull Copyright 2011 Jehiah Czebotar <jehiah@gmail.com>
# http://github.com/jehiah/git-open-pull

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You can find the GNU General Public License at:
## http://www.gnu.org/licenses/

HELP_TEXT='
 USAGE
       $ git open-pull [options] [feature_branch]

 OPTIONS
       -u --user   - github username 
       -p --password - github password (not needed when passing --token, or using a saved token)
       --save - save access token for future use
       -t --token - github oauth token
       -i --issue  - issue number
       -b --base   - the branch you want your changes pulled into. default: master
       --base-account - the account containing issue and the base branch to merge into
       --base-repo - the github repository name
       
       feature-branch - the branch (or git ref) where your changes are implemented
                        feature branch is assumed to be user/feature-branch if no
                        user is specified. default: working branch name (or prompted)


 CONFIGURATION
       If available, git-open-pull will use the following config values. When not available
       They will be requested on the command line. Note storing your git password this way is
       not secure.

       [github]
               user = ....
               password = ....
       [gitOpenPull]
               token = .....
               baseAccount = ....
               baseRepo = .....
               base = master

 ABOUT
       Because the ideal workflow is `issue -> branch -> pull request` this script
       takes a github issue and turns it into a pull request based on your branch
       against master in the integration account

       This makes use of the github `POST /repos/:user/:repo/pulls` endpoint
       more info on that is available at http://developer.github.com/v3/pulls/

'

PYTHON_CMD=${PYTHON_CMD:-$(which python)}
if [ -z "$PYTHON_CMD" ] || ! $PYTHON_CMD --version >/dev/null 2>&1 ; then
    echo "unable to find 'python' command"
    exit 1
fi
GIT_CMD=${GIT_CMD:-$(which git)}
if [ -z "$GIT_CMD" ] || ! $GIT_CMD --version >/dev/null 2>&1 ; then
    echo "unable to find 'git' command"
    exit 1
fi

# grab defaults where we can
#####################
BASE_ACCOUNT=`$GIT_CMD config --get gitOpenPull.baseAccount`
BASE_REPO=`$GIT_CMD config --get gitOpenPull.baseRepo`
BASE_BRANCH=`$GIT_CMD config --get gitOpenPull.base || echo "master"`
GITHUB_USER=`$GIT_CMD config --get github.user`
GITHUB_PASSWORD=`$GIT_CMD config --get github.password`
GITHUB_TOKEN=`$GIT_CMD config --get gitOpenPull.token`
FEATURE_BRANCH=`$GIT_CMD rev-parse --abbrev-ref HEAD`
ISSUE_NUMBER=`echo $FEATURE_BRANCH | perl -p -e 's/.*[-_]([0-9]+)$/\1/'`
if [ "$ISSUE_NUMBER" == "$FEATURE_BRANCH" ]; then
    # Some people like to use the number as the prefix, try that.
    ISSUE_NUMBER=`echo $FEATURE_BRANCH | perl -p -e 's/^([0-9]+)[-_].*/\1/'`
    if [ "$ISSUE_NUMBER" == "$FEATURE_BRANCH" ]; then
        ISSUE_NUMBER=""
    fi
fi


# parse the command line args
#####################
while [ $# -gt 0 ]; do
    # try to handle any of "--key=value" or "--key value" or "--flag"
    # extra shift only if form is "--key value"
    if [[ "$1" == *=* ]]; then
        PARAM=${1%%=*}
        VALUE=${1#*=}
        SHIFT=false
    else
        PARAM=$1
        VALUE=$2
        SHIFT=shift
    fi
    case $PARAM in
        -u | --user)
            GITHUB_USER="$VALUE"
            $SHIFT
            ;;
        -p | --password)
            GITHUB_PASSWORD="$VALUE"
            $SHIFT
            ;;
        -t | --token)
            GITHUB_TOKEN="$VALUE"
            $SHIFT
            ;;
        --base-account)
            BASE_ACCOUNT="$VALUE"
            $SHIFT
            ;;
        --base-repo)
            BASE_REPO="$VALUE"
            $SHIFT
            ;;
        -b | --base)
            BASE_BRANCH="$VALUE"
            $SHIFT
            ;;
        -i | --issue)
            ISSUE_NUMBER="$VALUE"
            $SHIFT
            ;;
        --save)
            SAVE_ACCESS_TOKEN=1
            ;;
        -h | --help)
            printf "%s" "$HELP_TEXT"
            exit
            ;;
        * )
            FEATURE_BRANCH="$1"
            ;;
    esac
    shift
done

if [ -z "$BASE_ACCOUNT" ]; then
    read -p "destination github username (account to pull code into): " BASE_ACCOUNT
    $GIT_CMD config gitOpenPull.baseAccount $BASE_ACCOUNT
fi

if [ -z "$BASE_REPO" ]; then
    read -p "github repository name (ie: github.com/$BASE_ACCOUNT/___): " BASE_REPO
    $GIT_CMD config gitOpenPull.baseRepo $BASE_REPO
fi

# prompt for values as needed
#####################
if [ -z "$GITHUB_TOKEN" ]; then
    
    if [ -z "$GITHUB_USER" ]; then
        read -p "github username: " GITHUB_USER
    fi
    if [ -z "$GITHUB_PASSWORD" ]; then
        echo "using github username: $GITHUB_USER"
        # turn off echo to the shell
        stty -echo 
        read -p "github password: " GITHUB_PASSWORD; echo
        stty echo
    fi

    # now we need to get an oauth token
    # this asks for access to private repos because, well, obviously you could be using this
    # script for a private repo
    echo "... getting access token (run with --save to save access token)"
    endpoint="https://api.github.com/authorizations"
    OAUTH_JSON=`curl --silent -u "$GITHUB_USER:$GITHUB_PASSWORD" -d "{\"scopes\":[\"repo\"],\"note\":\"git-open-pull $BASE_ACCOUNT/$BASE_REPO\"}" $endpoint`
    GITHUB_TOKEN=$(echo $OAUTH_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
if "token" in data:
    print data["token"]
')

    if [ -z "$GITHUB_TOKEN" ]; then
        echo $OAUTH_JSON
        exit 1;
    fi
    
    # conditionally save the access token
    if [ "$SAVE_ACCESS_TOKEN" == "1" ]; then
        $GIT_CMD config gitOpenPull.token "$GITHUB_TOKEN"
    else
        read -p "save access token? [Y/n]: " ASK_SAVE_ACCESS_TOKEN
        if [ -z $ASK_SAVE_ACCESS_TOKEN ] || [ "$ASK_SAVE_ACCESS_TOKEN" == "y" ]; then
            $GIT_CMD config gitOpenPull.token "$GITHUB_TOKEN"
        fi
    fi
else
    if [ -z "$GITHUB_USER" ]; then
        echo "Github username isn't set. Pass the --user flag to this script or set with \`git config --global github.user YOUR_USER_NAME\` to avoid being prompted"
        read -p "github username: " GITHUB_USER
    fi
    echo "... using saved access token"
fi

if [ -z "$ISSUE_NUMBER" ]; then
    read -p "enter issue number (or 'c' to create): " ISSUE_NUMBER
    if [ "$ISSUE_NUMBER" == "c" ]; then
        read -p "issue title: " ISSUE_TITLE
        read -p "issue description: " ISSUE_DESCRIPTION
        endpoint="https://api.github.com/repos/$BASE_ACCOUNT/$BASE_REPO/issues"
        json="{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_DESCRIPTION\"}"
        ISSUE_JSON=`curl --silent -H "Accept: application/vnd.github-issue.text+json,application/json" --data-binary "$json" "$endpoint?access_token=$GITHUB_TOKEN"`
        ISSUE_NUMBER=$(echo $ISSUE_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
if "number" not in data:
    print "ERROR verifying issue number: ", data
else:
    print data.get("number")
')
        if ! echo $ISSUE_NUMBER | egrep -q '^[0-9]+$'; then 
            echo "Error creating issue $ISSUE_NUMBER"
            exit 1;
        fi

        echo "created issue $ISSUE_NUMBER"
    fi
else
    read -p "issue number [$ISSUE_NUMBER]: " temp
    [ -n "$temp" ] && ISSUE_NUMBER=$temp
fi

# Do we need/want to rename the branch?
if ! echo "$FEATURE_BRANCH" | egrep -q "^$ISSUE_NUMBER[_-]|[_-]$ISSUE_NUMBER\$"; then
    read -p "rename branch to ${FEATURE_BRANCH}_${ISSUE_NUMBER} [y/n]:" confirm
    if [ "$confirm" == "y" ] || [ -z "$confirm" ]; then
        echo "renaming local branch $FEATURE_BRANCH -> ${FEATURE_BRANCH}_${ISSUE_NUMBER}"
        $GIT_CMD branch -m "${FEATURE_BRANCH}_${ISSUE_NUMBER}" || exit 1
        FEATURE_BRANCH="${FEATURE_BRANCH}_${ISSUE_NUMBER}"
    fi
fi

if [ -z "$FEATURE_BRANCH" ]; then
    read -p "enter branch to base pull request on: " FEATURE_BRANCH
else
    read -p "base pull request on [$FEATURE_BRANCH]: " temp
    [ -n "$temp" ] && FEATURE_BRANCH=$temp
fi

echo "pushing branch ${FEATURE_BRANCH} to $GITHUB_USER"
$GIT_CMD push $GITHUB_USER "${FEATURE_BRANCH}" || exit 1

# Github needs a variable amount of time before a new branch
# can be used to open a pull request. This is usually enough.
sleep 2

# validate remote information
##############################

# branch should be separated with ':'
FEATURE_BRANCH=$(echo $FEATURE_BRANCH | sed -e 's/\//:/g')
# if username part was not specified, assume it's the github username
if ! echo $FEATURE_BRANCH | egrep -q ':'; then
    FEATURE_BRANCH="$GITHUB_USER:$FEATURE_BRANCH"
fi

# now lookup issue information
# endpoint => /repos/:user/:repo/issues/:id
endpoint="https://api.github.com/repos/$BASE_ACCOUNT/$BASE_REPO/issues/$ISSUE_NUMBER"
ISSUE_JSON=`curl --silent -H "Accept: application/vnd.github-issue.text+json,application/json" "$endpoint?access_token=$GITHUB_TOKEN"`
ISSUE_STATE=$(echo $ISSUE_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
# open("/tmp/issue.json", "w").write(data)
data = json.loads(data)
if "message" in data:
    print "ERROR verifying issue number: ", data["message"]
else:
    print data.get("state", "unknown-issue")
')
[[ $? != 0 ]] && echo "unknown error $ISSUE_JSON" && exit 1
[[ "$ISSUE_STATE" =~ "ERROR" ]] && echo $ISSUE_STATE && exit 1

if [ "$ISSUE_STATE" != "open" ]; then
    echo ""
    echo "Error: $BASE_ACCOUNT/$BASE_REPO issue $ISSUE_NUMBER is $ISSUE_STATE"
    exit 1;
fi
ISSUE_TITLE=$(echo $ISSUE_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
print data["title"]
')
[[ $? != 0 ]] && echo "unknown error extracting issue title $ISSUE_JSON" && exit 1


# check for source branch
# endpoint -> /repos/:user/:repo/branches
source_user=$(echo "$FEATURE_BRANCH" | awk -F ':' '{print $1}')
endpoint="https://api.github.com/repos/$source_user/$BASE_REPO/branches"
branch_name=$(echo "$FEATURE_BRANCH" | awk -F ':' '{print $NF}')
BRANCHES_JSON=`curl --silent -H "Accept: application/vnd.github-branches.text+json,application/json" "$endpoint?access_token=$GITHUB_TOKEN"`
BRANCH_EXISTS=$(echo $BRANCHES_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
data = [x for x in data if x.get("name") == sys.argv[-1]]
print len(data)
' "$branch_name")
if [ "$BRANCH_EXISTS" != "1" ]; then
    echo ""
    echo "Error: branch ($branch_name) does not exist in $source_user/$BASE_REPO"
    echo -n -e "\tvalid branches are: "
    echo $BRANCHES_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
data = [x.get("name") for x in data]
print ", ".join(data)
'
    exit 1;
fi

echo "Opening pull request on $BASE_ACCOUNT/$BASE_REPO"
echo "Issue: $ISSUE_NUMBER ($ISSUE_TITLE)"
echo "pulling from $FEATURE_BRANCH into $BASE_ACCOUNT/$BASE_REPO branch $BASE_BRANCH"
read -p "confirm [y/n]:" confirm
if [ "$confirm" != "y" ]; then
    echo "exiting";
    exit 1;
fi

json="{\"issue\":$ISSUE_NUMBER, \"base\":\"$BASE_BRANCH\", \"head\":\"$FEATURE_BRANCH\"}"
endpoint="https://api.github.com/repos/$BASE_ACCOUNT/$BASE_REPO/pulls"
PULL_JSON=`curl --silent -H "Accept: application/vnd.github-pull.text+json,application/json" --data-binary "$json" "$endpoint?access_token=$GITHUB_TOKEN"`
PULL_STATUS=$(echo $PULL_JSON | $PYTHON_CMD -c '
try:
    import simplejson as json
except ImportError:
    import json
import sys
data = sys.stdin.read().strip().replace("\n",r"\n").replace("\r","")
data = json.loads(data)
pull_link = data.get("html_url")
if not pull_link:
    print "ERROR updating issue to a pull request: " + data.get("message")
    for error in data.get("errors", []):
        if error.get("message"):
            print "  --> ERROR DETAIL: " + error.get("message")
else:
    print "Pull Request Opened"
    print pull_link
')
echo "$PULL_STATUS"
